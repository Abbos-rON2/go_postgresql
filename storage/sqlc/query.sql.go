// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, phone, first_name, last_name, is_active, birth_date, role, address ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) returning guid
`

type CreateUserParams struct {
	Username  string
	Password  string
	Phone     string
	FirstName string
	LastName  string
	IsActive  bool
	BirthDate time.Time
	Role      Roles
	Address   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
		arg.BirthDate,
		arg.Role,
		arg.Address,
	)
	var guid uuid.UUID
	err := row.Scan(&guid)
	return guid, err
}

const deleteUser = `-- name: DeleteUser :exec
update users set deleted_at = now() where guid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, guid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, guid)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, guid, username, password, phone, first_name, last_name, is_active, birth_date, address, role, created_at, updated_at, deleted_at from users limit $1 offset $2
`

type GetAllUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Username,
			&i.Password,
			&i.Phone,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.BirthDate,
			&i.Address,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select id, guid, username, password, phone, first_name, last_name, is_active, birth_date, address, role, created_at, updated_at, deleted_at from users where guid = $1
`

func (q *Queries) GetUser(ctx context.Context, guid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, guid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Username,
		&i.Password,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.BirthDate,
		&i.Address,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
select guid, username, password, role, is_active from users where username = $1
`

type LoginUserRow struct {
	Guid     uuid.UUID
	Username string
	Password string
	Role     Roles
	IsActive bool
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(
		&i.Guid,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update users set password = $3 where guid = $1 and password = $2
`

type UpdateUserPasswordParams struct {
	Guid       uuid.UUID
	Password   string
	Password_2 string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Guid, arg.Password, arg.Password_2)
	return err
}
